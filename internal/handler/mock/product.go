// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/product.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/chscz/ph/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(ctx context.Context, product *domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), ctx, product)
}

// DeleteProduct mocks base method.
func (m *MockProductRepository) DeleteProduct(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteProduct), ctx, id)
}

// GetProduct mocks base method.
func (m *MockProductRepository) GetProduct(ctx context.Context, id int) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, id)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductRepositoryMockRecorder) GetProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductRepository)(nil).GetProduct), ctx, id)
}

// GetProductSearchList mocks base method.
func (m *MockProductRepository) GetProductSearchList(ctx context.Context, keyword string, itemsPerPage int, whereClause string) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductSearchList", ctx, keyword, itemsPerPage, whereClause)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductSearchList indicates an expected call of GetProductSearchList.
func (mr *MockProductRepositoryMockRecorder) GetProductSearchList(ctx, keyword, itemsPerPage, whereClause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductSearchList", reflect.TypeOf((*MockProductRepository)(nil).GetProductSearchList), ctx, keyword, itemsPerPage, whereClause)
}

// GetProductSearchListByChoSung mocks base method.
func (m *MockProductRepository) GetProductSearchListByChoSung(ctx context.Context, keyword string, itemsPerPage int, whereClause string) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductSearchListByChoSung", ctx, keyword, itemsPerPage, whereClause)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductSearchListByChoSung indicates an expected call of GetProductSearchListByChoSung.
func (mr *MockProductRepositoryMockRecorder) GetProductSearchListByChoSung(ctx, keyword, itemsPerPage, whereClause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductSearchListByChoSung", reflect.TypeOf((*MockProductRepository)(nil).GetProductSearchListByChoSung), ctx, keyword, itemsPerPage, whereClause)
}

// GetProducts mocks base method.
func (m *MockProductRepository) GetProducts(ctx context.Context, itemsPerPage int, whereClause string) ([]*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, itemsPerPage, whereClause)
	ret0, _ := ret[0].([]*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductRepositoryMockRecorder) GetProducts(ctx, itemsPerPage, whereClause interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductRepository)(nil).GetProducts), ctx, itemsPerPage, whereClause)
}

// GetTotalProductCount mocks base method.
func (m *MockProductRepository) GetTotalProductCount(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalProductCount", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalProductCount indicates an expected call of GetTotalProductCount.
func (mr *MockProductRepositoryMockRecorder) GetTotalProductCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalProductCount", reflect.TypeOf((*MockProductRepository)(nil).GetTotalProductCount), ctx)
}

// GetTotalSearchedProductsCount mocks base method.
func (m *MockProductRepository) GetTotalSearchedProductsCount(ctx context.Context, keyword string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSearchedProductsCount", ctx, keyword)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSearchedProductsCount indicates an expected call of GetTotalSearchedProductsCount.
func (mr *MockProductRepositoryMockRecorder) GetTotalSearchedProductsCount(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSearchedProductsCount", reflect.TypeOf((*MockProductRepository)(nil).GetTotalSearchedProductsCount), ctx, keyword)
}

// GetTotalSearchedProductsCountByChoSung mocks base method.
func (m *MockProductRepository) GetTotalSearchedProductsCountByChoSung(ctx context.Context, keyword string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSearchedProductsCountByChoSung", ctx, keyword)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSearchedProductsCountByChoSung indicates an expected call of GetTotalSearchedProductsCountByChoSung.
func (mr *MockProductRepositoryMockRecorder) GetTotalSearchedProductsCountByChoSung(ctx, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSearchedProductsCountByChoSung", reflect.TypeOf((*MockProductRepository)(nil).GetTotalSearchedProductsCountByChoSung), ctx, keyword)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(ctx context.Context, product *domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), ctx, product)
}
